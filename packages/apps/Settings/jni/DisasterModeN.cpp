/* DO NOT EDIT THIS FILE - it is machine generated */

#include "jni.h"

#include <utils/misc.h>
#include <android_runtime/AndroidRuntime.h>
#include <utils/Log.h>
#include <utils/String16.h>
#include <cutils/properties.h>

#include <string.h>
#include <android/log.h>
#include "DisasterModeN.h"



namespace android {
extern "C" {
static JavaVM *cachedJavaVm;

/*
 * Class:     com_android_settings_DisasterModeNative
 * Method:    updateColorScheme
 * Signature: (I)I
 */


JNIEXPORT jint JNICALL Java_com_android_settings_DisasterModeNative_updateColorScheme
  (JNIEnv *env, jobject obj, jint colorscheme){
	char key[PROPERTY_VALUE_MAX];
	
  //property_set(key,val);
    
	return colorscheme+1;

}




/*
 * Class:     com_android_settings_DisasterModeNative
 * Method:    updateVSync
 * Signature: (I)I
 */



JNIEXPORT jint JNICALL Java_com_android_settings_DisasterModeNative_updateVSync
  (JNIEnv *env, jobject obj, jint vsyncrate){
  	return vsyncrate+1;
}


JNIEXPORT jint JNICALL Java_com_android_settings_DisasterModeNative_updateDMProperty(JNIEnv *env, jclass clas, jstring jkey, jstring jvalue){
  //log
	const char* key;
	const char* value;
	key = env->GetStringUTFChars(jkey,NULL);
	value = env->GetStringUTFChars(jvalue,NULL);
	property_set(key,value);
	return 0;
}


// ----------------------------------------------------------------------------

/*
 * JNI registration.
 */




static const char *DM_PKGNAME = "com/android/settings/DisasterModeNative";
//static JNINativeMethod gDisasterModeMethods[] = {
//    /* name, signature, funcPtr */
//
//
//    { "updateColorScheme", "(I)I",
//            (void*) Java_com_android_settings_DisasterModeNative_updateColorScheme },
//    { "updateVSync", "(I)I",
//            (void*) Java_com_android_settings_DisasterModeNative_updateVSync },
//};


//static int register_com_android_settings_disastermodenative(JNIEnv *env)
//{
//    jclass classname;
//
//    classname = env->FindClass(DM_PKGNAME);
//    if (classname == NULL) {
//
//        return -1;
//    }
//    return AndroidRuntime::registerNativeMethods(env,
//                DM_PKGNAME, gDisasterModeMethods, NELEM(gDisasterModeMethods));
//}
//
//JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)
//{
//    JNIEnv* env = NULL;
//    jint result = -1;
//    LOGI("JNI Onload");
//
//    if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
//        //LOGE("ERROR: GetEnv failed\n");
//        goto bail;
//    }
//    assert(env != NULL);
//    //neil add
//    if (register_com_android_settings_disastermodenative(env) == -1){
//        goto bail;
//    }
//    result = JNI_VERSION_1_4;
//
//bail:
//    return result;
//}


JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *jvm, void *reserved) {
  JNIEnv *env;
  jclass cls;


  //LOGI("onload");


  if (jvm->GetEnv((void **) &env, JNI_VERSION_1_6) != JNI_OK) {
   // LOGE("onload//bad version");
    cachedJavaVm = NULL;
    return(JNI_ERR);
  }

  cachedJavaVm = jvm;

  return JNI_VERSION_1_6;
}

/*
 * cleanup
 */
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *jvm, void *reserved) {
  //LOGI("OnUnload Noted");
}
}
};
